name: CI Pipeline
on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent hanging jobs
    steps:
      # Debugging information first
      - name: Debug Information
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "Runner OS: $(uname -a)"
          echo "Working directory: $(pwd)"
          echo "Files in repo:"
          ls -la

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for debugging

      # Node.js setup
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          check-latest: true

      - name: Verify Node installation
        run: node -v && npm -v

      - name: Install Node dependencies
        run: npm ci
        env:
          CI: true  # Prevent interactive installs
          
      # Python setup
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          allow-prereleases: false

      - name: Verify Python installation
        run: python -V && pip -V

      - name: Install Python packages
        run: |
          pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install flake8 nose

      # Linting with failure allowed
      - name: Lint with Flake8
        run: flake8 . --count --show-source --statistics || echo "Linting issues found"
        continue-on-error: true  # Don't block build on linting

      # Testing with test reports
      - name: Run Python tests with nose
        run: |
          nosetests -v --with-xunit
        env:
          NOSE_WITH_XUNIT: 1
        continue-on-error: false

      - name: Upload Test Results
        if: always()  # Always upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: nose-test-results
          path: nosetests.xml

      # Build with cache
      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      # Final success message
      - name: CI Success
        if: success()
        run: echo "CI pipeline completed successfully!"